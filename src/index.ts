import { app, BrowserWindow, session, ipcMain } from 'electron'
import { CONTEXT_BRIDGE_EVENT_NAMES } from './context-bridge-event-names'
import { getWindowSize, setWindowSize } from './file-system-store'
import { WINDOW_SIZE_CHANNEL } from './settings/settings.view'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

const isMacOs = (): boolean => {
  return process.platform === 'darwin'
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

const createWindow = async (): Promise<void> => {
  console.debug(
    '\x1b[33m\x1b[40m%s\x1b[0m',
    `\n===== [DEBUG] ===== MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY ===== [DEBUG] =====`,
  )
  console.debug(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY)
  console.debug(
    '\x1b[33m\x1b[40m%s\x1b[0m',
    `===== [DEBUG] ===== MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY ===== [DEBUG] =====\n`,
  )

  console.debug(
    '\x1b[33m\x1b[40m%s\x1b[0m',
    `\n===== [DEBUG] ===== MAIN_WINDOW_WEBPACK_ENTRY ===== [DEBUG] =====`,
  )
  console.debug(MAIN_WINDOW_WEBPACK_ENTRY)
  console.debug(
    '\x1b[33m\x1b[40m%s\x1b[0m',
    `===== [DEBUG] ===== MAIN_WINDOW_WEBPACK_ENTRY ===== [DEBUG] =====\n`,
  )

  const windowSettings = getWindowSize()

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: windowSettings.height,
    width: windowSettings.width,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true, //
    },
  })

  // TODO: Figure out how to set custom icon for the application.
  // mainWindow.setIcon(path.join(__dirname, 'assets', 'peepo_happy.webp'))

  // TODO: Figure out how to set a custom path where the data will be saved. This might be useful for me during local development, as I could reset corrupted saved settings faster.
  // app.setPath(
  //   'userData',
  //   isDev
  //     ? path.join(app.getAppPath(), 'userdata/') // In development it creates the userdata folder where package.json is
  //     : path.join(process.resourcesPath, 'userdata/'), // In production it creates userdata folder in the resources folder
  // )

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  ipcMain.on(WINDOW_SIZE_CHANNEL, (event) => {
    console.log(event)
  })
  // mainWindow.on(WINDOW_SIZE_CHANNEL, () => {
  //   console.log(`Resized event called.`)
  //   const [width, height] = mainWindow.getSize()
  //   setWindowSize({ width, height })
  // })

  // Open the DevTools.
  mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // Session modification logic must occur before window is created.
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        // TODO: Review the electron security documentation again and find out what exactly this header is being set up for.
        // I need this line so that I can send HTTP requests from React application to any URL.
        // There is a chance that it will not be needed in production mode.
        // It is possible that this configuration of Content-Security-Policy header will cause problems with the security of the application, but for now I don't understand how it works.
        'Content-Security-Policy': ['*'],
      },
    })
  })

  await createWindow()

  // TODO: Figure out how to load browser extensions such as React/Redux dev tools.
  // if (isDev) {
  //   await session.defaultSession
  //     .loadExtension(
  //       path.join(__dirname, `../userdata/extensions/react-dev-tools`), // This is the directory where loaded extensions should live.
  //     )
  //     .then((name) => console.log(name))
  //     .catch((err) => console.log(err))
  // }
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (isMacOs()) {
    return
  }

  app.quit()
})

app.on('activate', async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    await createWindow()
  }
})

process.on('uncaughtException', (error) => {
  console.error(`Uncaught exception occurred.`)
  console.error(error)

  if (process.platform !== 'darwin') {
    app.quit()
  }
})

ipcMain.handle(CONTEXT_BRIDGE_EVENT_NAMES.RESIZE_WINDOW, (event, args) => {
  setWindowSize(args)
})

ipcMain.handle(CONTEXT_BRIDGE_EVENT_NAMES.QUIT_APP, () => {
  app.quit()
})
